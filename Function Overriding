#include <iostream>
#include <cmath>

class Shape {
public:
    // Virtual function to calculate area
    virtual double area() {
        return 0.0; // Default implementation
    }
};

class Circle : public Shape {
private:
    double radius;

public:
    Circle(double r) : radius(r) {}

// Overriding the area function
    double area() override {
        return M_PI * radius * radius; // Area of the circle
    }
};

class Rectangle : public Shape {
private:
    double length, width;

public:
    Rectangle(double l, double w) : length(l), width(w) {}

    // Overriding the area function
    double area() override {
        return length * width; // Area of the rectangle
    }
};

int main() {
    Shape* shape1 = new Circle(5.0); // Create a Circle object
    Shape* shape2 = new Rectangle(4.0, 6.0); // Create a Rectangle object

    // Call the overridden area function
    std::cout << "Area of Circle: " << shape1->area() << std::endl;
    std::cout << "Area of Rectangle: " << shape2->area() << std::endl;

    // Clean up
    delete shape1;
    delete shape2;

    return 0;
}
